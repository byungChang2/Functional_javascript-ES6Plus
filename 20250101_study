const ES5_list = [1,2,3];
for(var i = 0; i< ES5_list.length; i++){
    console.log(ES5_list[i])
}

const ES6_list = [1,2,3];
for(let a of ES6_list){
    console.log(a)
}

console.log('Array를 통해 알아보기')
const Arr_arr = [1,2,3];
for(const a of Arr_arr) console.log(a);

console.log('Set 통해 알아보기')
const Set_arr = new Set([1,2,3]);
for(const a of Set_arr) console.log(a);

console.log('Map 통해 알아보기')
const Map_arr = new Map([ ['a',1],['b',2],['c',3] ]);
for(const a of Map_arr) console.log(a);


<!--
	ES5 문법에서 봤던 var i = 0; i< ES5_list.length; i++ 이런 형태로 키를 하나 하나 순회하여 배열의 값을 조회하는 것인 줄 알았으나.
	ES6 문법에서 for ~of 문법에서는 Arr_arr은 키값으로 조회가 되었지만
	SET,MAP은 순회가 되지 않았다.
	그렇다면 es6에서는 새로운 이터러블한 프로퍼티 개념이 있는것인가? 어떻게 조회가 되는 것이지? 
	(나는 너무도 단순히 키값으로 조회가 되는 것인줄알았따.)
-->

array,set,map은 자바스크립트 내장객체로서 이터러블,이터레이터 프로토콜을 따르고있다.
-이터러블 : 이터레이터를 리터하는 [Symbol.iterator]()를 가진 값
-이터레이터 : {value, done} 객체를 리턴하는 next()를 가진 값 
-이터러블,이터레이터 프로토콜: 이터러블을 for ... of, 전개 연산자 등과 함께 동작하도록 한 규약.

정리: arr은 심볼이터레이터를 실행 이터레이터를 계속해서 순회하면서 안쪽에 value로 떨어지는 값을 조회하는것.
; const arr =[1,2,3];
; let iterator = arr[Symbol.iterator]();
; iterator.next();
; iterator.next();
; for(const a of iterator) console.log(a);